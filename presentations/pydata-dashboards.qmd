---
title: An Introduction to Python Dashboards
subtitle: |
  | PyData Northern Utah
  | [github.com/marcdotson/pydata-dashboards](https://github.com/marcdotson/pydata-dashboards)
author: Marc Dotson
date: 2025-02-28
title-slide-attributes:
  data-background-color: "#486790"
format: 
  revealjs:
    theme: marc.scss     # Modified simple theme.
    slide-number: c/t    # Numbered slides current/total.
    self-contained: true # Render to a single HTML file.
execute:
  eval: false
  echo: true
# output-location: column
---

## 

:::: {.columns .v-center}

::: {.column width="40%"}
![](../figures/pydata.png){fig-align="center"}
:::

::: {.column width="60%"}
::: {.incremental}
- Professional forum to learn/retool
- Global network of chapters
- Workshops vary from beginning to advanced
- Polyglot (Python, Julia, R, etc.)
- You agree to the [PyData Code of Conduct](https://pydata.org/code-of-conduct/)
- Join at [meetup.com/pydata-northern-utah](https://www.meetup.com/pydata-northern-utah/)
:::
:::

::::

## 

:::: {.columns .v-center}

::: {.column width="40%"}
![](../figures/hackusu.png){fig-align="center"}
:::

::: {.column width="60%"}
::: {.incremental}
- Provide some guidance for the datathon
- Focus on Python beginners
- Assume you've installed Python (and an IDE)
- Focus is on three specific data tools
- Special focus on *human-readable* code
- Need help? Raise your hand or talk after
:::
:::

::::

# Polars

## 

:::: {.columns .v-center}

::: {.column width="40%"}
![](../figures/polars.png){fig-align="center"}
:::

::: {.column width="60%"}
::: {.incremental}
- New data wrangling library
- Alternative to Pandas for using DataFrames
- Fast -- in Rust, uses Apache Arrow, built to parallelize and use GPUs, allows for lazy evaluation
- More consistent syntax than Pandas
- Anagram of its query engine (OLAP) and Rust (rs)
:::
:::

::::

## Filter, slice, and sort observations

Polars syntax follows a human-readable, SQL-like grammar

- Install with `pip install polars`
- Parameters for `.slice()` are the start index and length
- We use `pl.col()` to reference variables in our data

```{python}
#| code-line-numbers: "|1-2|4|5-6|8-9|10|12|14-15"
import polars as pl
import os

customer_data = pl.read_csv(os.path.join('data', 'customer_data.csv'))
customer_data.shape
customer_data.columns

customer_data.filter(pl.col('college_degree') == 'Yes')
customer_data.filter(pl.col('region') != 'West')
customer_data.filter(pl.col('gender') != 'Female', pl.col('income') > 70000)

customer_data.slice(0, 5)

customer_data.sort(pl.col('birth_year'))
customer_data.sort(pl.col('birth_year'), descending = True)
```

```{python}
#| echo: false
import polars as pl
import os

customer_data = pl.read_csv(os.path.join('..', 'data', 'customer_data.csv'))
```

## Select and recode/create variables, join data frames

Polars `.filter()` and `.select()` are separate methods

```{python}
#| code-line-numbers: "|1-2|4|6|8-9"
customer_data.select(pl.col('region'), pl.col('review_text'))
customer_data.select(pl.col(['region', 'review_text']))

customer_data.with_columns(income_new = pl.col('income') / 1000)

store_transactions = pl.read_csv(os.path.join('data', 'store_transactions.csv'))

customer_data.join(store_transactions, on = 'customer_id', how = 'left')
customer_data.join(store_transactions, on = 'customer_id', how = 'inner')
```

```{python}
#| echo: false
store_transactions = pl.read_csv(os.path.join('..', 'data', 'store_transactions.csv'))
```

## Chain methods to supercharge human-readability

Polars embraces method chaining to improve efficiency

- The entire chain needs to be surrounded with `( )`
- Each line *starts* with `.`
- You run the whole block of code at once
- The consistent syntax can be read like a sentence

```{python}
#| code-line-numbers: "|1|2|3|4|5|6|7"
(customer_data
  .join(store_transactions, on = 'customer_id', how = 'left')
  .filter(pl.col('region') == 'West', pl.col('feb_2005') == pl.col('feb_2005').max())
  .with_columns(age = 2025 - pl.col('birth_year'))
  .select(pl.col(['age', 'feb_2005']))
  .sort(pl.col('age'), descending = True)
  .slice(0, 1)
)
```

## Summarize variables, including grouped summaries

Human-readable code is designed to be consistent at the cost of being verbose

```{python}
#| code-line-numbers: "|1-4|6-9|11-18"
(customer_data
  .select(pl.col('income'))
  .mean()
)

(customer_data
  .group_by(pl.col(['region', 'college_degree']))
  .agg(n = pl.len())
)

(customer_data
  .group_by(pl.col(['gender', 'region']))
  .agg(
    avg_income = pl.col('income').mean(), 
    avg_credit = pl.col('credit').mean()
  )
  .sort(pl.col('avg_income'), descending = True)
)
```

## Optimize underlying queries with lazy evaluation

Tagg a data frame with `.lazy()` to have Polars optimize the query

- Code is only run when we use `.collect()`
- Look at the underlying optimized OLAP query using `.explain()`

```{python}
#| code-line-numbers: "|1-9|11|13"
df = (customer_data
  .group_by(pl.col(['gender', 'region']))
  .agg(
    n = pl.len(), 
    avg_income = pl.col('income').mean(), 
    avg_credit = pl.col('credit').mean()
  )
  .sort(pl.col('avg_income'), descending = True)
).lazy()

df.collect()

df.explain()
```

# seaborn.objects

## 

:::: {.columns .v-center}

::: {.column width="40%"}
![](../figures/seaborn-objects.png){fig-align="center"}
:::

::: {.column width="60%"}
::: {.incremental}
- New (under development) seaborn module for visualizing data
- Like seaborn, it's a higher-level interface for matplotlib
- Unlike seaborn, it attempts to eliminate the need to fine-tune plots with matplotlib
- More consistent syntax following the [grammar of graphics](https://link.springer.com/book/10.1007/0-387-28695-0)
- Each plot is composed of data, a mapping, and the specific graphic
:::
:::

::::

## Column plots

With a focus on human-readability, seaborn.objects relies on method chaining and is consistent and verbose

- Install with `pip install seaborn.objects`
- We can't method chain between object classes
- Data and the mapping happen with `so.Plot()`
- The graphic is specified with `so.Bar()`

:::: {.columns}

::: {.column width="50%"}
```{python}
#| code-line-numbers: "|1|3-11|13-16"
import seaborn.objects as so

# Option 1: Plot + Mark
region_count = (customer_data
  .group_by(pl.col('region'))
  .agg(n = pl.len())
)

(so.Plot(region_count, x = 'region', y = 'n')
  .add(so.Bar())
)

# Option 2: Plot + Mark + Stat
(so.Plot(customer_data, x = 'region')
  .add(so.Bar(), so.Hist())
)
```
:::

::: {.column width="50%"}
![](../figures/plot01.png){fig-align="center"}
:::

::::

## Histograms

seaborn.objects provides flexibility through combining Marks and Stats

:::: {.columns}

::: {.column width="50%"}
```{python}
(so.Plot(customer_data, x = 'income')
  .add(so.Bars(), so.Hist())
)
```
:::

::: {.column width="50%"}
![](../figures/plot02.png){fig-align="center"}
:::

::::

## Scatterplots

Each Mark and Stat has its own parameters to customize your plots

:::: {.columns}

::: {.column width="50%"}
```{python}
(so.Plot(customer_data, x = 'star_rating', y = 'income')
  .add(so.Dot(pointsize = 10, alpha = 0.5), so.Jitter(0.75))
)
```
:::

::: {.column width="50%"}
![](../figures/plot03.png){fig-align="center"}
:::

::::

## Line plots

A Stat is not always sufficient -- we often need to iterate between data wrangling and visualization

:::: {.columns}

::: {.column width="50%"}
```{python}
(so.Plot(customer_data, x = 'review_time', y = 'star_rating')
  .add(so.Line())
)
```
:::

::: {.column width="50%"}
![](../figures/plot04.png){fig-align="center"}
:::

::::

## Line plots

:::: {.columns}

::: {.column width="50%"}
```{python}
#| code-line-numbers: "|1-12|2|3-6|7-9|10-11|14-16"
rating_data = (customer_data
  .drop_nulls(pl.col('star_rating'))
  .select(pl.col(['review_time', 'star_rating']))
  .with_columns(
    pl.col('review_time').str.to_date(format='%m %d, %Y').alias('review_time')
  )
  .with_columns(
    pl.col('review_time').dt.year().alias('review_year')
  )
  .group_by('review_year')
  .agg(pl.mean('star_rating').alias('avg_star_rating'))
)

(so.Plot(rating_data, x = 'review_year', y = 'avg_star_rating')
  .add(so.Line())
)
```
:::

::: {.column width="50%"}
![](../figures/plot05.png){fig-align="center"}
:::

::::

## Facets

There are lots of things you can do to customize a plot beyond the data, mapping, and graphic type

- The `.facet()` method behaves like a `.group_by()` for the plot
- You can `.facet()` by mapping different variables to `col` and `row`

:::: {.columns}

::: {.column width="50%"}
```{python}
#| code-line-numbers: "|2"
(so.Plot(customer_data, x = 'income')
  .facet(col = 'gender')
  .add(so.Bars(), so.Hist())
)
```
:::

::: {.column width="50%"}
![](../figures/plot06.png){fig-align="center"}
:::

::::

# Quarto

## 

:::: {.columns .v-center}

::: {.column width="40%"}
![](../figures/seaborn-objects.png){fig-align="center"}
:::

::: {.column width="60%"}
::: {.incremental}
- New (under development) seaborn module for visualizing data
- Like seaborn, it's a higher-level interface for matplotlib
- Unlike seaborn, it attempts to eliminate the need to fine-tune plots with matplotlib
- More consistent syntax following the [grammar of graphics](https://link.springer.com/book/10.1007/0-387-28695-0)
- Each plot is composed of data, a mapping, and the specific graphic
:::
:::

::::











# {background-color="#486790"}

:::: {.columns .v-center}

::: {.column width="60%"}
![](../figures/pydata-northern-utah-qr.png){fig-align="center"}
:::

::: {.column width="40%"}
[marc.dotson@usu.edu](mailto:marc.dotson@usu.edu)  
[github.com/marcdotson](https://github.com/marcdotson)  
[occasionaldivergences.com](https://occasionaldivergences.com)
:::

::::
